// Global variables
// gamevar is used to store all game variables for the game
var gamevar = {
    // posYplayer: 401 and posXplayer: 1 = default start value.
    player_start_x: 201,
    player_start_y: 460,
    player_position_x: 0,
    player_position_y: 0,
    player_walk: 100,
    enemy_start_pos: -100,
    enemy_total: 10,
    canvas_width_max: 401,
    canvas_width_min: 1,
    canvas_max_col: 5,
    canvas_min_col: 1,
    canvas_rows: [101],
    canvas_colums: [60, 140, 220, 300, 380],
    speed: [-100, -80, -70],
    moveForward: 100,
    moveBackward: -100,
    collision: 80,
    collisionDetected: false,
    pause: true

}

var allEnemies = [];

// Enemies our player must avoid
var Enemy = function() {
    //  this.randomrow();
    // this.randomstart(this.x);
    //this.randomspeed();
    this.x = gamevar.enemy_start_pos;
    this.y = gamevar.canvas_colums[Math.floor(Math.random() * gamevar.canvas_colums.length)];
    this.speed = gamevar.speed[Math.floor(Math.random() * gamevar.speed.length)];
    this.sprite = 'images/enemy-bug.png';
    console.log("Enemy x :" + this.x + " Enemy y : " + this.y)
};

// Update the enemy's position, required method for game
// Parameter: dt, a time delta between ticks
Enemy.prototype.update = function(dt) {

    if (gamevar.pause !== false) {
        this.x = this.x + dt + this.speed;
        console.log(this.x, this.y)
        if (this.x > gamevar.canvas_width_max) {
            this.x = gamevar.enemy_start_pos;
            this.y = gamevar.canvas_colums[Math.floor(Math.random() * gamevar.canvas_colums.length)];
            this.speed = gamevar.speed[Math.floor(Math.random() * gamevar.speed.length)];

        } else {
            this.x = this.x + 101
        }

        if (parseInt(this.x) >= (gamevar.player_position_x - gamevar.collision) && parseInt(this.x) <= gamevar.player_position_x) {
            if (this.y === gamevar.player_position_y) {
                // player.reset();
                gamevar.collisionDetected = true;
                gamevar.pause = false;
                console.log(gamevar.pause)
                console.log(this.x, this.y)
                console.log(gamevar.player_position_x, gamevar.player_position_y)
                var menu = $('#menu')
                menu.append('<button onclick="myFunction()">Restart</button>')
            }

        }
    } else {
        //do nothing
    }
};
// Draw the enemy on the screen, required method for game
Enemy.prototype.render = function() {

    // if (this.x <= 401) {
    // this.x = this.x + 101
    // this.randomspeed();
    // } else {
    // this.x = gamevar.enemy_start_pos;
    // this.y = gamevar.canvas_colums[Math.floor(Math.random() * gamevar.canvas_colums.length)];
    // this.speed = gamevar.speed[Math.floor(Math.random() * gamevar.speed.length)];
    // }
    // console.log(this.y, this.x, this.speed, this.sprite)
    if (gamevar.collisionDetected === true) {
        writeText("lose", "red")
    }

    ctx.drawImage(Resources.get(this.sprite), this.x, this.y);


};
//Enemy.prototype.walk = function() {
// Get an random value between canvas coloumns and add multiplicate with 100 + 1
//      if (this.x <= 401) {
// gamevar.posXenemy = gamevar.posXenemy + 101
//    } else {
// gamevar.posXenemy = 1;
// }

// }
//Enemy.prototype.randomstart = function() {
//  // Get an random value between canvas coloumns and multiplicate with 100 + 1
// this.y = (Math.floor(Math.random() * (gamevar.canvas_max_col - gamevar.canvas_min_col)) + gamevar.canvas_min_col) * 100 + 1;

//}

//Enemy.prototype.randomstart = function(input) {
//   input = gamevar.canvas_colums[Math.floor(Math.random() * gamevar.canvas_colums.length)];
//}
//Enemy.prototype.randomspeed = function() {
//   var new_speed =
//      console.log(new_speed);
// this.speed = new_speed;
//}




// Now write your own player class
// This class requires an update(), render() and
// a handleInput() method.
var Player = function(x, y) {
    gamevar.player_position_x = x;
    gamevar.player_position_y = y;
    this.sprite = 'images/char-boy.png';
}
Player.prototype.update = function(x, y) {
    this.x = x;
    this.y = y;

}
Player.prototype.render = function() {
    this.x = gamevar.player_position_x;
    this.y = gamevar.player_position_y;
    if (this.y === 1) {
        console.log("player is a winner!")
        ctx.drawImage(Resources.get(this.sprite), this.x, this.y);
        writeText("you won!", "green")
        gamevar.pause = false;
    }
    if (gamevar.pause !== false) {
        ctx.drawImage(Resources.get(this.sprite), this.x, this.y);
    }
};

Player.prototype.handleInput = function(move) {
    switch (move) {
        case "down":
            this.checkCanvas("y", (gamevar.player_position_y + 80));
            gamevar.player_position_y = this.y;
            break;
        case "right":
            this.checkCanvas("x", (gamevar.player_position_x + 100));
            gamevar.player_position_x = this.x;
            break;
        case "up":
            this.checkCanvas("y", (gamevar.player_position_y - 80));
            gamevar.player_position_y = this.y;
            break;
        case "left":
            this.checkCanvas("x", (gamevar.player_position_x - 100));
            gamevar.player_position_x = this.x;
            break;
    }

};

Player.prototype.checkCanvas = function(op, number) {
    console.log(this.number);
    if (op === "y") {
        if (number >= 401 || number <= 1) {
            if (number >= 401) {
                this.y = 401;
            }
            if (number <= 1) {
                this.y = 1;
            }
        } else {
            this.y = number;
        }
    }
    if (op === "x") {
        if (number >= 401 || number <= 1) {
            if (number >= 401) {
                this.x = 401;
            }
            if (number <= 1) {
                this.x = 1;
            }
        } else {
            this.x = number;
        }
    }
    console.log("player x =" + this.x);
    console.log("player y =" + this.y);

}
Player.prototype.reset = function() {
        this.x = gamevar.player_start_x;
        this.y = gamevar.player_start_y;
        gamevar.player_position_x = gamevar.player_start_x;
        gamevar.player_position_y = gamevar.player_start_y;
        gamevar.pause = true;
    }
    // Now instantiate your objects.
    // Place all enemy objects in an array called allEnemies
    // Place the player object in a variable called player



// This listens for key presses and sends the keys to your
// Player.handleInput() method. You don't need to modify this.
document.addEventListener('keyup', function(e) {
    var allowedKeys = {
        37: 'left',
        38: 'up',
        39: 'right',
        40: 'down'
    };

    player.handleInput(allowedKeys[e.keyCode]);
});


function writeText(textinput, color) {
    ctx.font = "100px Arial";
    ctx.fillStyle = color;
    ctx.fillText(textinput, 80, 300);
}

// 
// Game starts
//
// add total number of enemies on canvas with enemy_total variable
for (var i = 0; i < gamevar.enemy_total; i++) {
    allEnemies.push(new Enemy());
}
// Init a player
var player = new Player(gamevar.player_start_x, gamevar.player_start_y);